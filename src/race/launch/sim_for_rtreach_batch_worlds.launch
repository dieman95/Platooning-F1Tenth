<?xml version="1.0"?>
<launch>
  
    <!--initialize the arguments-->
    <arg name="world_number" default="0"/>
    <arg name="car_name" default="racecar"/>
    <arg name="gui" default="true" />

    <!--random seed used to allocte obstacles within vehicle environment-->
    <arg name="random_seed" default = "15"/>
    
    <!--how long to run each experiment before timeout-->
    <arg name="timeout" default = "-1"/>

    <!--network model utilized for end-to-end driving-->
    <arg name="model_name" default="minivgg_center_data.hdf5"/>

    <!--Launch The Model-->
    <node pkg="computer_vision" name="lec_model" type="ros_classifier.py" args="$(arg car_name) $(find computer_vision)models/$(arg model_name) 1" required="true" output="log"/>

    <!-- how many obstacles (cones) to allocate in the environment-->
    <arg name="num_obstacles" default="0"/>

    <!--generation of obtacles and visualization in rviz -->
    <node pkg="racecar_gazebo" type="spawn_cone.py" name="spawn_cones" args = "$(arg random_seed) porto_freespace.txt $(arg num_obstacles)" output="screen"/>

    <!--Handles selecting a track-->
    <arg name="world_name" if="$(eval arg('world_number')==0)" value="track_porto"/>
    <arg name="world_name" if="$(eval arg('world_number')==1)" value="racecar_tunnel"/>
    <arg name="world_name" if="$(eval arg('world_number')==2)" value="racecar_walker"/>
    <arg name="world_name" if="$(eval arg('world_number')==3)" value="track_barca"/>

    <!--Handles finding the map file -->
    <arg name="map_name" if="$(eval arg('world_number')==0)" value="track_porto.yaml"/>
    <arg name="map_name" if="$(eval arg('world_number')==1)" value="racecar_tunnel.yaml"/>
    <arg name="map_name" if="$(eval arg('world_number')==2)" value="racecar_walker.yaml"/>
    <arg name="map_name" if="$(eval arg('world_number')==3)" value="track_barca.yaml"/>

    <!--Handles finding the wall points-->
    <arg name="wall_points" if="$(eval arg('world_number')==0)" value="track_porto_obstacles.txt"/>
    <arg name="wall_points" if="$(eval arg('world_number')==1)" value="racecar_tunnel_obstacles.txt"/>
    <arg name="wall_points" if="$(eval arg('world_number')==2)" value="racecar_walker_obstacles.txt"/>
    <arg name="wall_points" if="$(eval arg('world_number')==3)" value="track_barca_obstacles.txt"/>


    <!--Handles finding the obstacle map-->
 
    <!--occupancy grid of selected track-->
    <arg name="map_file" default="$(find race)/maps/$(arg map_name)"/>
	<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

    <!--RVIZ Display-->
    <node pkg="rviz" type="rviz" name="rviz_display"  args="-d $(find race)/rviz/rtreach.rviz" if="$(arg gui)" output="log"/>

    <!--docker requirements-->
    <arg name="use_sim_time" default = "true"/>
    <arg name="verbose" default ="false"/>
    <!--launch the simulator-->
    <include file="$(find race)/launch/f1_tenth_devel.launch">
        <arg name ="world_name" value="$(arg world_name)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="use_sim_time" default = "$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)" />
    </include>

    <!--launch the speed node it will be constant in this case-->
    <node name="speed_node_$(arg car_name)" pkg="race" type="speed_node.py"  args='$(arg car_name)'/>

    <!-- generation of safety controller-->
    <node pkg="race" type="safety_controller.py" name="safety_node" args="racecar/scan racecar/safety" output="screen"/>

    <!--time out node-->
    <node pkg="racecar_gazebo" type="kill_simulation.py" name="timeout" required="true" args = "$(arg timeout)" output="screen"/>

    <!--launch rviz to visualize reachable set-->
    <node pkg="rtreach" type="benchmark_node" name="benchmark_node" args="$(arg wall_points)" output="screen"/>

    <!--ttc node-->
    <node pkg="race" type="ttc.py" name="ttc" required="true" args = "$(arg car_name)" output="screen"/>

    
</launch>